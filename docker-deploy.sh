#!/bin/bash

# Script de d√©ploiement Docker pour Smart City Dashboard
# Utilisation: ./docker-deploy.sh [dev|prod|stop|clean|logs]

set -e

PROJECT_NAME="smart-city-dashboard"
COMPOSE_FILE="docker-compose.yml"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# V√©rifier si Docker est install√©
check_docker() {
    if ! command -v docker &> /dev/null; then
        error "Docker n'est pas install√©. Veuillez installer Docker d'abord."
        exit 1
    fi

    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose n'est pas install√©. Veuillez installer Docker Compose d'abord."
        exit 1
    fi
}

# Cr√©er le fichier .env si n√©cessaire
create_env() {
    if [ ! -f ".env" ]; then
        log "Cr√©ation du fichier .env..."
        cp env.docker.txt .env
        warning "Le fichier .env a √©t√© cr√©√© avec des valeurs par d√©faut."
        warning "Pensez √† modifier les mots de passe pour la production !"
    fi
}

# D√©ploiement en d√©veloppement
deploy_dev() {
    log "üöÄ D√©ploiement en mode d√©veloppement..."

    # Cr√©er les volumes n√©cessaires
    docker volume create ${PROJECT_NAME}_timescaledb_data 2>/dev/null || true

    # Construire et d√©marrer les services
    docker-compose up -d --build

    # Attendre que les services soient pr√™ts
    log "‚è≥ Attente du d√©marrage des services..."
    sleep 10

    # V√©rifier l'√©tat des services
    check_services

    log "‚úÖ Application d√©ploy√©e avec succ√®s !"
    log "üåê Frontend: http://localhost:3000"
    log "üîß Backend API: http://localhost:5000"
    log "üóÑÔ∏è Base de donn√©es: localhost:5432"
}

# D√©ploiement en production
deploy_prod() {
    log "üöÄ D√©ploiement en mode production..."

    # Cr√©er les volumes n√©cessaires
    docker volume create ${PROJECT_NAME}_timescaledb_data 2>/dev/null || true

    # Construire les images sans cache pour la production
    docker-compose build --no-cache

    # D√©marrer en mode d√©tach√©
    docker-compose up -d

    # Attendre que les services soient pr√™ts
    log "‚è≥ Attente du d√©marrage des services..."
    sleep 15

    # V√©rifier l'√©tat des services
    check_services

    log "‚úÖ Application d√©ploy√©e en production !"
    log "üåê Application: http://localhost (via Nginx)"
    log "üîß Backend API: http://localhost/api"
}

# Arr√™ter les services
stop_services() {
    log "üõë Arr√™t des services..."
    docker-compose down
    log "‚úÖ Services arr√™t√©s."
}

# Nettoyer compl√®tement
clean_all() {
    log "üßπ Nettoyage complet..."

    # Arr√™ter et supprimer les conteneurs
    docker-compose down -v --remove-orphans

    # Supprimer les images
    docker-compose rm -f

    # Supprimer les volumes
    docker volume rm ${PROJECT_NAME}_timescaledb_data 2>/dev/null || true

    # Nettoyer les images non utilis√©es
    docker image prune -f

    # Nettoyer les volumes non utilis√©s
    docker volume prune -f

    log "‚úÖ Nettoyage termin√©."
}

# Afficher les logs
show_logs() {
    log "üìã Logs des services:"
    docker-compose logs -f
}

# V√©rifier l'√©tat des services
check_services() {
    log "üîç V√©rification de l'√©tat des services..."

    # V√©rifier les conteneurs
    if docker-compose ps | grep -q "Up"; then
        info "Conteneurs actifs:"
        docker-compose ps
    else
        error "Aucun conteneur actif trouv√©"
        return 1
    fi

    # Tester la connectivit√©
    log "üîå Test de connectivit√©..."

    # Tester le backend
    if curl -f http://localhost:5000/health &>/dev/null; then
        info "‚úÖ Backend API accessible"
    else
        warning "‚ö†Ô∏è Backend API non accessible (peut √™tre normal pendant le d√©marrage)"
    fi

    # Tester le frontend
    if curl -f http://localhost:3000 &>/dev/null; then
        info "‚úÖ Frontend accessible"
    else
        warning "‚ö†Ô∏è Frontend non accessible (peut √™tre normal pendant le d√©marrage)"
    fi
}

# Afficher l'aide
show_help() {
    echo "Script de d√©ploiement Docker pour Smart City Dashboard"
    echo ""
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  dev     D√©ploiement en mode d√©veloppement"
    echo "  prod    D√©ploiement en mode production"
    echo "  stop    Arr√™ter tous les services"
    echo "  clean   Nettoyer compl√®tement (supprime volumes)"
    echo "  logs    Afficher les logs des services"
    echo "  status  V√©rifier l'√©tat des services"
    echo "  help    Afficher cette aide"
    echo ""
    echo "Examples:"
    echo "  $0 dev          # D√©marrer en d√©veloppement"
    echo "  $0 prod         # D√©marrer en production"
    echo "  $0 stop         # Arr√™ter les services"
    echo "  $0 clean        # Nettoyer compl√®tement"
    echo "  $0 logs         # Voir les logs"
}

# Fonction principale
main() {
    check_docker
    create_env

    case "${1:-help}" in
        "dev")
            deploy_dev
            ;;
        "prod")
            deploy_prod
            ;;
        "stop")
            stop_services
            ;;
        "clean")
            clean_all
            ;;
        "logs")
            show_logs
            ;;
        "status")
            check_services
            ;;
        "help"|*)
            show_help
            ;;
    esac
}

# Ex√©cuter la fonction principale
main "$@"
