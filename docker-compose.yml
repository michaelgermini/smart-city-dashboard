services:
  # Base de donn√©es TimescaleDB
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: smart-city-timescaledb
    environment:
      POSTGRES_DB: smart_city
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme123!@#}
    ports:
      - "5432:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    networks:
      - smart-city-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smart-city-backend
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: timescaledb
      DB_PORT: 5432
      DB_NAME: smart_city
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-changeme123!@#}
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      - timescaledb
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - smart-city-network
    restart: unless-stopped

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: smart-city-frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000
      REACT_APP_WS_URL: ws://localhost:5000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - smart-city-network
    restart: unless-stopped

  # Nginx reverse proxy (optionnel)
  nginx:
    image: nginx:alpine
    container_name: smart-city-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
      - frontend
    networks:
      - smart-city-network
    restart: unless-stopped

volumes:
  timescaledb_data:

networks:
  smart-city-network:
    driver: bridge
